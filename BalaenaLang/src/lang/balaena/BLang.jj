options{  JDK_VERSION = "1.5";  STATIC = false;  DEBUG_LOOKAHEAD = true;}PARSER_BEGIN(BLang)package lang.balaena;import java.io.*;import lang.balaena.recuperacao.*;public class BLang{  static int qtdErroSintatico = 0;  static boolean debug_recuperacao = false;  public static void main(String args []) throws ParseException  {    boolean debug = false;    boolean recuperacao = false;    String arquivo = "";    BLang parser;    for (int i = 0; i < args.length - 1; i++)    {      if (args [i].toLowerCase().equals("-debug"))      {        debug = true;      }      else if (args [i].toLowerCase().equals("-recuperacao"))      {        recuperacao = true;      }      else if (args [i].toLowerCase().equals("-f"))      {        if (i + 1 == args.length - 1)        {          arquivo = args [i + 1].toLowerCase();        }      }    }    if (arquivo.isEmpty())    {      System.out.println("Entrada padrão");      parser = new BLang(System.in);    }    else    {      try      {        System.out.println("Usando arquivo: " + arquivo);        parser = new BLang(new FileInputStream(arquivo));      }      catch (FileNotFoundException e)      {        System.out.println("Arquivo \"" + arquivo + "\" não encontrado");        return;      }    }    if (!debug)    {      System.out.println("debug");      parser.disable_tracing();      parser.debug_recuperacao = recuperacao;    }    try    {      parser.programa();    }    catch (ParseEOFException e)    {      System.out.println(e.getMessage());      qtdErroSintatico++;    }    finally    {      System.out.println(parser.token_source.errosLexicos() + " erros lexicos encontrados");      System.out.println(parser.qtdErroSintatico + " erros sintaticos encontrados");    }  }  public static String im(int x)  {    int k;    String s;    s = tokenImage [x];    k = s.lastIndexOf("\"");    try    {      s = s.substring(1, k);    }    catch (StringIndexOutOfBoundsException e)    {}    return s;  }  public void consumirAte(Recuperacao recuperacao, ParseException e, String terminal) throws ParseEOFException, ParseException  {    if (debug_recuperacao)    {      System.out.println("\n# TERMINAL: " + terminal + "#");      System.out.println("Cadeia de sincronização: " + recuperacao);    }    // Propaga a exceção    if (recuperacao == null)    {      throw e;    }    boolean eof = false;    Token token = getToken(1);    while (!eof)    {      if (recuperacao.contains(token.kind))      {        if (debug_recuperacao)        {          System.out.println("Token de sincronização encontrado: " + im(token.kind));        }        break;      }      if (debug_recuperacao)      {        System.out.println("Token ignorado: " + im(token.kind));      }      getNextToken();      token = getToken(1);      if (token.kind == EOF && !recuperacao.contains(token.kind))      {        eof = true;      }    }    System.out.println(e.getMessage());    qtdErroSintatico++;    if (eof) throw new ParseEOFException("Fim do arquivo encontrado");  }}PARSER_END(BLang)TOKEN_MGR_DECLS :{  int qtdErrosLexicos = 0;  public int errosLexicos()  {    return qtdErrosLexicos;  }}SKIP :{  " "| "\r"| "\t"| "\n"| "\f"}/* Palavras reservadas */TOKEN :{  < BREAK : "interrompe" >| < SENAO : "senao" >| < SE : "se" >| < PARA : "para" >| < INTEIRO : "inteiro" >| < DECIMAL : "decimal" >| < TEXTO : "texto" >| < VAZIO : "vazio" >| < NOVO : "novo" >| < ESCREVER : "escrever" >| < LER : "ler" >| < RETORNA : "retorna" >| < METODO : "metodo" >| < PRINCIPAL : "principal" >| < ENQUANTO : "enquanto" >}/* Operadores */TOKEN :{  < ATRIBUICAO : "=" >| < MAIOR : ">" >| < MENOR : "<" >| < IGUAL : "==" >| < MAIORIGUAL : ">=" >| < MENORIGUAL : "<=" >| < DIFERENTE : "!=" >| < MAIS : "+" >| < MENOS : "-" >| < MULTIPLICACAO : "*" >| < DIVISAO : "/" >| < RESTO : "%" >}/* Símbolos especiais */TOKEN :{  < PARENESQ : "(" >| < PARENDIR : ")" >| < CHAVEESQ : "{" >| < CHAVEDIR : "}" >| < COLCHESQ : "[" >| < COLCHDIR : "]" >| < PONTOVIRGULA : ";" >| < VIRGULA : "," >| < PONTO : "." >}/* Auxiliares */TOKEN :{  < #DIGITO : [ "0"-"9" ] >| < #LETRA : [ "a"-"z", "A"-"Z" ] >}/* Constantes */TOKEN :{  < CONST_INTEIRO :    (      < DIGITO > (< DIGITO >)*    ) >| < CONST_DECIMAL : < CONST_INTEIRO > < PONTO > < CONST_INTEIRO >>| < CONST_TEXTO : "\"" (~[ "\"", "\n", "\r" ])* "\"" >| < CONST_NULO : "nulo" >}/* Identificadores */TOKEN :{  < IDENT :    < LETRA >    (      < LETRA >    | < DIGITO >    )* >}void programa() throws ParseEOFException :{  Recuperacao r = new Recuperacao(EOF);}{  try  {    [ lista_metodo(r) ] < EOF >  }  catch (ParseException e)  {    consumirAte(r, e, "programa");  }}void lista_metodo(Recuperacao rec) throws ParseEOFException :{}{  try  {    (LOOKAHEAD(2)    decl_metodo(rec)) * metodo_principal(rec) (LOOKAHEAD(2)    decl_metodo(rec)) *  }  catch (ParseException e)  {    consumirAte(rec, e, "lista_metodo");  }}void decl_array() :{}{  (< COLCHESQ > < COLCHDIR >)+}void tipo_primitivo(Recuperacao rec) throws ParseEOFException :{}{  try  {    (< INTEIRO >  | < DECIMAL >  | < TEXTO >)  }  catch (ParseException e)  {    consumirAte(rec, e, "tipo_primitivo");  }}void decl_metodo(Recuperacao rec) throws ParseEOFException :{}{  try  {    < METODO > (tipo_primitivo(rec) [ decl_array() ]  | < VAZIO >) < IDENT > corpo_metodo(rec)  }  catch (ParseException e)  {    consumirAte(rec, e, "decl_metodo");  }}void metodo_principal(Recuperacao rec) throws ParseEOFException :{}{  try  {    < METODO > < PRINCIPAL > < PARENESQ > < PARENDIR > bloco(rec)  }  catch (ParseException e)  {    consumirAte(rec, e, "metodo_principal");  }}void corpo_metodo(Recuperacao rec) throws ParseEOFException :{  Recuperacao r = new Recuperacao(PARENDIR);}{  try  {    < PARENESQ > [ parametros(r) ] < PARENDIR > bloco(rec)  }  catch (ParseException e)  {    consumirAte(rec, e, "corpo_metodo");  }}void parametros(Recuperacao rec) throws ParseEOFException :{}{  try  {    tipo_primitivo(rec) < IDENT > (< VIRGULA > tipo_primitivo(rec) < IDENT >) *  }  catch (ParseException e)  {    consumirAte(rec, e, "parametros");  }}void bloco(Recuperacao rec) throws ParseEOFException :{  Recuperacao r = new Recuperacao(CHAVEDIR);}{  try  {    < CHAVEESQ > (declaracao(r)) * < CHAVEDIR >  }  catch (ParseException e)  {    consumirAte(rec, e, "bloco");  }}void declaracao(Recuperacao rec) throws ParseEOFException :{}{  try  {    (decl_variavel(rec)  | atribuicao(rec)  | comando_imprimir(rec)  | comando_ler(rec)  | comando_retornar(rec)  | controle_se(rec)  | controle_enquanto(rec))  }  catch (ParseException e)  {    consumirAte(rec, e, "declaracao");  }}void ident_variavel(Recuperacao rec) throws ParseEOFException :{}{  try  {    < IDENT > [ decl_array() ]  }  catch (ParseException e)  {    consumirAte(rec, e, "ident_variavel");  }}void decl_variavel(Recuperacao rec) throws ParseEOFException :{  Recuperacao r = new Recuperacao(VIRGULA);}{  try  {    tipo_primitivo(r) ident_variavel(r) (< VIRGULA > ident_variavel(rec)) *  }  catch (ParseException e)  {    consumirAte(rec, e, "decl_variavel");  }}void atribuicao(Recuperacao rec) throws ParseEOFException :{  Recuperacao r = new Recuperacao(ATRIBUICAO);}{  try  {    valor_esquerdo(r) < ATRIBUICAO > (expressao(rec)  | alocacao(rec))  }  catch (ParseException e)  {    consumirAte(rec, e, "atribuicao");  }}void valor_esquerdo(Recuperacao rec) throws ParseEOFException :{  Recuperacao r = new Recuperacao(COLCHDIR);}{  try  {    < IDENT > (< COLCHESQ > expressao(r) < COLCHDIR >) *  }  catch (ParseException e)  {    consumirAte(rec, e, "valor_esquerdo");  }}void alocacao(Recuperacao rec) throws ParseEOFException :{  Recuperacao recTipo = new Recuperacao(COLCHESQ);  Recuperacao recExpr = new Recuperacao(COLCHDIR);}{  try  {    < NOVO > tipo_primitivo(recTipo) (< COLCHESQ > expressao(recExpr) < COLCHDIR >) +  }  catch (ParseException e)  {    consumirAte(rec, e, "alocacao");  }}void expressao(Recuperacao rec) throws ParseEOFException :{}{  try  {    (LOOKAHEAD(2)    expressao_numerica()  | chamada_metodo(rec))    [      operador_binario() (LOOKAHEAD(2)      expressao_numerica()    | chamada_metodo(rec))    ]  }  catch (ParseException e)  {    consumirAte(rec, e, "expressao");  }}void operador_binario() :{}{  (    < MAIOR >  | < MENOR >  | < IGUAL >  | < MAIORIGUAL >  | < MENORIGUAL >  | < DIFERENTE >  )}void chamada_metodo(Recuperacao rec) throws ParseEOFException :{  Recuperacao r = new Recuperacao(PARENDIR);}{  try  {    < IDENT > < PARENESQ > [ argumentos(r) ] < PARENDIR >  }  catch (ParseException e)  {    consumirAte(rec, e, "chamada_metodo");  }}void argumentos(Recuperacao rec) throws ParseEOFException :{}{  try  {    expressao(rec) (< VIRGULA > expressao(rec)) *  }  catch (ParseException e)  {    consumirAte(rec, e, "argumentos");  }}void expressao_numerica() throws ParseEOFException :{}{  termo()  (    (      < MAIS >    | < MENOS >    )    termo()  )*}void termo() throws ParseEOFException :{}{  expressao_unaria()  (    (      < MULTIPLICACAO >    | < DIVISAO >    | < RESTO >    )    expressao_unaria()  )*}void expressao_unaria() throws ParseEOFException :{}{  [    < MAIS >  | < MENOS >  ]  fator()}void fator() throws ParseEOFException :{  Recuperacao r = new Recuperacao(PARENDIR);}{  (    < CONST_INTEIRO >  | < CONST_DECIMAL >  | < CONST_TEXTO >  | < CONST_NULO >  | valor_esquerdo(null)  | < PARENESQ > expressao(r) < PARENDIR >  )}void comando_imprimir(Recuperacao rec) throws ParseEOFException :{  Recuperacao r = new Recuperacao(PARENDIR);}{  try  {    < ESCREVER > < PARENESQ > expressao(r) < PARENDIR >  }  catch (ParseException e)  {    consumirAte(rec, e, "comando_imprimir");  }}void comando_ler(Recuperacao rec) throws ParseEOFException :{  Recuperacao r = new Recuperacao(PARENDIR);}{  try  {    < LER > < PARENESQ > expressao(r) < PARENDIR >  }  catch (ParseException e)  {    consumirAte(rec, e, "comando_ler");  }}void comando_retornar(Recuperacao rec) throws ParseEOFException :{}{  try  {    < RETORNA >    [      LOOKAHEAD(2)      expressao(rec)    ]  }  catch (ParseException e)  {    consumirAte(rec, e, "comando_retornar");  }}void controle_se(Recuperacao rec) throws ParseEOFException :{  Recuperacao r = new Recuperacao(PARENDIR);}{  try  {    < SE > < PARENESQ > expressao(r) < PARENDIR > bloco(rec)    [      LOOKAHEAD(2)      < SENAO > bloco(rec)    ]  }  catch (ParseException e)  {    consumirAte(rec, e, "comando_se");  }}void controle_enquanto(Recuperacao rec) throws ParseEOFException :{  Recuperacao r = new Recuperacao(PARENDIR);}{  try  {    < ENQUANTO > < PARENESQ > expressao(r) < PARENDIR > bloco(rec)  }  catch (ParseException e)  {    consumirAte(rec, e, "controle_enquanto");  }}